/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.myorg.smartide;

import com.google.gson.Gson;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.URL;
import java.util.ArrayList;
import org.apache.commons.httpclient.HttpClient;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClientBuilder;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.myorg.smartide//SmartFix//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "SmartFixTopComponent",
        iconBase = "org/myorg/smartide/wand16.png",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "rightSlidingSide", openAtStartup = false)
@ActionID(category = "Window", id = "org.myorg.smartide.SmartFixTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_SmartFixAction",
        preferredID = "SmartFixTopComponent"
)
@Messages({
    "CTL_SmartFixAction=Smart Search",
    "CTL_SmartFixTopComponent=Smart Search",
    "HINT_SmartFixTopComponent=Smart Search"
})
public final class SmartFixTopComponent extends TopComponent {

    private String controllerAPI = "http://localhost:1314/controller/";
    private final SmartFixTopComponent self;
    private ResultSet resultSet = new ResultSet();
    private ArrayList<Answer> answers = new ArrayList<>();
    private int answerIterator = 0;
    private String answerMarkedText = "===<br>Thank you!<br>Your answer has been recorded.<br>===<br><br>";
    
    public SmartFixTopComponent() {
        initComponents();
        setName(Bundle.CTL_SmartFixTopComponent());
        setToolTipText(Bundle.HINT_SmartFixTopComponent());
        putClientProperty(TopComponent.PROP_KEEP_PREFERRED_SIZE_WHEN_SLIDED_IN, Boolean.TRUE);
        textArea.setEditable(false);
        textArea.setContentType("text/html");
        self = this;
    }
    
    public void search(String searchText) {
        try{
            String keyWord = searchText.replaceAll(" ", "---");
            URL url = new URL(controllerAPI+keyWord);
            System.out.println(controllerAPI+keyWord);
            
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String message = "";
            String text = "";
            
            while((text = reader.readLine()) != null)
                message += text;
            
            reader.close();

            Gson g = new Gson();
            resultSet = g.fromJson(message, ResultSet.class);
            answers = resultSet.getResultSet();
            
            showComponent();
            questionText.setText(answers.get(answerIterator).getQuestion());
            jLabel1.setText(answerIterator+1 + "/" + answers.size());
            voteText.setText(String.valueOf(answers.get(answerIterator).getVote()));
            nextButton.setEnabled(true);
            answerButton.setEnabled(true);
            
            textArea.setText(answers.get(answerIterator).getAnswer());
            textArea.setCaretPosition(0);
        }
        catch(Exception e){
            
        }
    }
    
    private void showComponent() {
        if(!self.isOpened())
            self.open();
        self.requestFocus();
        self.requestActive();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        answerButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        answerLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        questionLabel = new javax.swing.JLabel();
        questionText = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JEditorPane();
        voteLabel = new javax.swing.JLabel();
        voteText = new javax.swing.JLabel();

        jScrollPane2.setViewportView(jEditorPane1);

        org.openide.awt.Mnemonics.setLocalizedText(answerButton, org.openide.util.NbBundle.getMessage(SmartFixTopComponent.class, "SmartFixTopComponent.answerButton.text")); // NOI18N
        answerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                answerButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(nextButton, org.openide.util.NbBundle.getMessage(SmartFixTopComponent.class, "SmartFixTopComponent.nextButton.text")); // NOI18N
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        answerLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(answerLabel, org.openide.util.NbBundle.getMessage(SmartFixTopComponent.class, "SmartFixTopComponent.answerLabel.text")); // NOI18N

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(SmartFixTopComponent.class, "SmartFixTopComponent.jLabel1.text")); // NOI18N

        questionLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(questionLabel, org.openide.util.NbBundle.getMessage(SmartFixTopComponent.class, "SmartFixTopComponent.questionLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(questionText, org.openide.util.NbBundle.getMessage(SmartFixTopComponent.class, "SmartFixTopComponent.questionText.text")); // NOI18N
        questionText.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        questionText.setVerticalTextPosition(javax.swing.SwingConstants.TOP);

        jScrollPane3.setViewportView(textArea);

        voteLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(voteLabel, org.openide.util.NbBundle.getMessage(SmartFixTopComponent.class, "SmartFixTopComponent.voteLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(voteText, org.openide.util.NbBundle.getMessage(SmartFixTopComponent.class, "SmartFixTopComponent.voteText.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(questionLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(questionText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(nextButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 215, Short.MAX_VALUE)
                        .addComponent(answerButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(answerLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(voteLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(voteText)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(questionLabel)
                    .addComponent(questionText, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(answerLabel)
                    .addComponent(jLabel1)
                    .addComponent(voteLabel)
                    .addComponent(voteText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nextButton)
                    .addComponent(answerButton))
                .addGap(22, 22, 22))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void answerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_answerButtonActionPerformed

        try
        {
            answerButton.setEnabled(false);
            nextButton.setEnabled(false);
            // Change answer vote
            Answer selectedAnswer = answers.get(answerIterator);
            selectedAnswer.setVote(selectedAnswer.getVote()+1);
            // Change results array to just selected answer
            ArrayList<Answer> answer = new ArrayList<Answer>();
            answer.add(selectedAnswer);
            resultSet.setResultSet(answer);
            // Conver to json
            Gson g = new Gson();
            String jsonAnswer = g.toJson(resultSet);
            // TODO send jsonAnswer back to controller
            CloseableHttpClient client = HttpClientBuilder.create().build();
            HttpPost post = new HttpPost(controllerAPI);
            
            System.out.println(controllerAPI);
            
            StringEntity params = new StringEntity(jsonAnswer);
            
            post.setEntity(params);
            post.setHeader("Content-type", "application/json");
            HttpResponse response = client.execute(post);
            
            // update output
            String message = textArea.getText();
            message = answerMarkedText + message;
            voteText.setText(String.valueOf(selectedAnswer.getVote()));
            textArea.setText(message);
            textArea.setCaretPosition(0);
        }
        catch(Exception ex)
        {
            
        }
    }//GEN-LAST:event_answerButtonActionPerformed

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        if(answerIterator == answers.size()-1 )
            answerIterator = 0;
        else
            answerIterator++;
        
        textArea.setText(answers.get(answerIterator).getAnswer());
        textArea.setCaretPosition(0);
        
        jLabel1.setText(answerIterator+1 + "/" + answers.size());
        voteText.setText(String.valueOf(answers.get(answerIterator).getVote()));
        questionText.setText(answers.get(answerIterator).getQuestion());
    }//GEN-LAST:event_nextButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton answerButton;
    private javax.swing.JLabel answerLabel;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton nextButton;
    private javax.swing.JLabel questionLabel;
    private javax.swing.JLabel questionText;
    private javax.swing.JEditorPane textArea;
    private javax.swing.JLabel voteLabel;
    private javax.swing.JLabel voteText;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
